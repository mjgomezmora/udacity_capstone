version: 2.1

jobs:
  lint-docker:
    docker:
      - image: cimg/node:16.0.0
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Lint Dockerfile
          command: |
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x ./hadolint
            ./hadolint Dockerfile
  setup-python-environment:
    docker:
      - image: circleci/python:3.7.3-stretch
        environment:
          FLASK_CONFIG: testing
    steps:
      - checkout
      - run:
          name: Setup the virtual environment
          command: |
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NAME=capstone_image' >> $BASH_ENV 
            virtualenv capostoneenv
            . capostoneenv/bin/activate
            pip install --no-cache-dir -r requirements.txt
  build-docker-image:
    docker:
      - image: circleci/python:3.7.3-stretch
        environment:
          FLASK_CONFIG: testing
    steps:
      - checkout            
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and push Docker image
          command: |
            . capostoneenv/bin/activate
            docker build -t mjgmora/$IMAGE_NAME:$TAG .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push mjgmora/$IMAGE_NAME:$TAG
  upload-docker-image:
    docker:
      - image: circleci/python:3.7.3-stretch
        environment:
          FLASK_CONFIG: testing
    steps:
      - checkout            
      - setup_remote_docker:
          docker_layer_caching: true
            . capostoneenv/bin/activate
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push mjgmora/$IMAGE_NAME:$TAG
            
workflows:
  prepare-app-workflow:
    jobs:
      - lint-docker
      - setup-python-environment:
          requires: [lint-docker]
      - build-docker-image:
          requires: [setup-python-environment]      
      - upload-docker-image:
          requires: [build-docker-image]         
